package com.demo.project.service;

import java.util.List;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.demo.project.entities.Customer;
import com.demo.project.exception.CustomerAlreadyExists;
import com.demo.project.exception.CustomerEmailInvalid;
import com.demo.project.exception.CustomerNotFoundException;
import com.demo.project.exception.CustomerNumberInvalid;
import com.demo.project.repository.CustomerRepository;



@Service
public class CustomerService {
	@Autowired
	private CustomerRepository cr;
	
	public Customer create(Customer customer) throws CustomerAlreadyExists,CustomerNumberInvalid, CustomerEmailInvalid {
		if(customer != null) {
			String contactNum = "";
			String custEmail ="";
			String pass ="";
			
			boolean isValid = false;
			boolean isValidEmail = false;
			boolean isValidPassword = false;
			
			contactNum = customer.getContact();
			custEmail = customer.getEmail();
			pass=customer.getPassword();
			
			//phonenum validation
			Pattern contCheck = Pattern.compile("(0|91)?[7-9][0-9]{9}");
			Matcher contMatch = contCheck.matcher(contactNum);
			if(contMatch.find() && contMatch.group().equals(contactNum)) {
				isValid = true;
			}
			if(!isValid) {
				throw new CustomerNumberInvalid("invalid_contact_number");
			}
			//email validation
			Pattern emailCheck = Pattern.compile("[a-zA-Z0-9][a-zA-Z0-9._]*@[a-zA-Z0-9]+([.][a-zA-Z]+)+");
			Matcher emailMatch = emailCheck.matcher(custEmail);
			if(emailMatch.find() && emailMatch.group().equals(custEmail)) {
				isValidEmail = true;
			}
			if(!isValidEmail) {
				throw new CustomerEmailInvalid("invalid_email");
			}
			
			//minimum one Uppercase, minimum one lowercase, minimum one special character, minimum a single digit, atleast 8 characters 
			Pattern passCheck = Pattern.compile("([A-z]+[a-z]+[!@#$%^&*()_+=-]+[0-9]+){8,10}");
			Matcher passMatch = passCheck.matcher(pass);
			if(passMatch.find() && passMatch.group().equals(pass)) {
				isValidPassword = true;
			}
			if(!isValidPassword) {
				throw new CustomerPasswordInvalid("invalid_password");
			}
		}
		
		//minimum one Uppercase, minimum one lowercase, minimum one special character, minimum a single digit, atleast 8 characters 
		
		
	
		
		
		List<Customer> customerList = cr.findByEmail(customer.getEmail());

		if (null != customerList && customerList.size() > 0) {
			throw new CustomerAlreadyExists("email_already_exits");
		}
		return cr.save(customer);
	}
	public List<Customer> read() {
		return cr.findAll();
	}
	public Customer read(Integer id) {
		Optional<Customer> temp = cr.findById(id);
		Customer c=null;
		if(temp.isPresent())
		{
			c=temp.get();
		}
		return c;
	}
	public Customer update(Customer customer) {
		Customer c=read(customer.getId());
		if(c!=null)
		{
			cr.save(customer);
			c=customer;
		}
		return c;
	}
	public Customer delete(Integer id) {
		Customer c=read(id);
		if(c!=null)
		{
			cr.delete(c);			
		}
		return c;
	}
	
}
